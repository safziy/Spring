Spring AOP

1 一些概念
	方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的 Advisor或拦截器实现。
 
	连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用或特定的异常被抛出。
	 
	通知（Advice）: 在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。通知类型将在下面讨论。许多AOP框架包括Spring都是以拦截器做通知模型，维护一个“围绕”连接点的拦截器链。Spring中定义了四个advice: BeforeAdvice, AfterAdvice, ThrowAdvice和DynamicIntroductionAdvice
	 
	切入点（Pointcut）: 指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点：例如，使用正则表达式。 Spring定义了Pointcut接口，用来组合MethodMatcher和ClassFilter，可以通过名字很清楚的理解， MethodMatcher是用来检查目标类的方法是否可以被应用此通知，而ClassFilter是用来检查Pointcut是否应该应用到目标类上
	 
	引入（Introduction）: 添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口
	 
	目标对象（Target Object）: 包含连接点的对象。也被称作被通知或被代理对象。POJO
	 
	AOP代理（AOP Proxy）: AOP框架创建的对象，包含通知。 在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。
	 
	织入（Weaving）: 组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。

2. 实现方式
	a) 继承API接口
		通知类  Spring AOP提供了5中通知
			前置通知[Before advice]：在连接点前面执行，前置通知不会影响连接点的执行，除非此处抛出异常。 
			正常返回通知[After returning advice]：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。 
			异常返回通知[After throwing advice]：在连接点抛出异常后执行。 
			返回通知[After (finally) advice]：在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。 
			环绕通知[Around advice]：环绕通知围绕在连接点前后，比如一个方法调用的前后。这是最强大的通知类型，能在方法调用前后自定义一些操作。环绕通知还需要负责决定是继续处理join point(调用ProceedingJoinPoint的proceed方法)还是中断执行。	
		
		五种通知的执行顺序为： 前置通知→环绕通知→正常返回通知/异常返回通知→返回通知

		public class Log implements MethodBeforeAdvice {

			@Override
			public void before(Method method, Object[] args, Object target) throws Throwable {
				System.out.println("Log before " + target + " " + method.getName() + "" + args);
			}

		}

		配置切面和切点
		<bean id="userServies" class="com.safziy.spring.servies.UserServies" />
		<bean id="log" class="com.safziy.spring.aop.Log" />
		<aop:config>
			<aop:pointcut expression="execution(* com.safziy.spring.servies.UserServies.speak(..))" id="userServiesPointcut" />
			<aop:advisor advice-ref="log" pointcut-ref="userServiesPointcut" />
		</aop:config>

	b) 自定义接口
		// 自定义一个类
		public class MyAdvice {

			public void before() {
				System.out.println("MyAdvice before()");
			}
			
			public void after() {
				System.out.println("MyAdvice after()");
			}
			
			public void afterReturning() {
				System.out.println("MyAdvice afterReturning()");
			}
			
			public void afterThrowing() {
				System.out.println("MyAdvice afterThrowing()");
			}
			
			public void around() {
				System.out.println("MyAdvice around()");
			}

		}
		配置切面和切点
		<bean id="myAdvice" class="com.safziy.spring.aop.MyAdvice" />
		<!-- aop配置 -->
	    <aop:config>
	        <aop:aspect ref="myAdvice">
	            <aop:pointcut expression="execution(* com.safziy.spring.servies.UserServies.speak(..))" id="userServiesPointcut" />
	            <aop:before method="before" pointcut-ref="pointcut"/>
	            <aop:after method="after" pointcut-ref="pointcut"/>
	            <aop:after-returning method="afterReturning" pointcut-ref="pointcut"/>
	            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut"/>
	            <aop:around method="around" pointcut-ref="pointcut"/>
	        </aop:aspect>
	    </aop:config>